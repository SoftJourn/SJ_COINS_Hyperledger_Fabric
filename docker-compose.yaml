#
# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
version: '2'

networks:
  coins:

services:

  ca.sjfabric.softjourn.if.ua:
    restart: on-failure
    container_name: "ca.${MAIN_DOMAIN}"
    image: hyperledger/fabric-ca:${HYPERLEDGER_CA_VERSION}
    environment:
      - FABRIC_CA_SERVER_DEBUG=false
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - "FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.${MAIN_DOMAIN}-cert.pem"
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/priv_sk
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - "FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.${MAIN_DOMAIN}-cert.pem"
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/priv_sk
      - "FABRIC_CA_SERVER_CA_NAME=ca.${MAIN_DOMAIN}"
      - "FABRIC_CA_SERVER_PORT=${PORT_CA}"
    ports:
      - "${PORT_CA}:${PORT_CA}"
    command: sh -c 'fabric-ca-server start --cfg.identities.allowremove --cfg.affiliations.allowremove -b ${CA_USER}:${CA_PASSWORD} -d -c /etc/hyperledger/fabric-ca-server-config/fabric-ca-server-config.yaml'
    volumes:
      - "${GENERATED_CONFIG_PATH}/peerOrganizations/${MAIN_DOMAIN}/ca/:/etc/hyperledger/fabric-ca-server-config"
      - "${BLOCKCHAIN_CONFIG_PATH}/fabric-ca-server-config.yaml:/etc/hyperledger/fabric-ca-server-config/fabric-ca-server-config.yaml"
      - "${RUNTIME_ROOT}/ca:/app_data"
    networks:
      - "${NETWORK}"

  orderer.sjfabric.softjourn.if.ua:
    restart: on-failure
    container_name: "orderer.${MAIN_DOMAIN}"
    image: hyperledger/fabric-orderer:${HYPERLEDGER_VERSION}
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - "ORDERER_GENERAL_LISTENPORT=${PORT_ORDERER}"
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderers
    command: orderer
    ports:
      - "${PORT_ORDERER}:${PORT_ORDERER}"
    volumes:
      - "${GENERATED_CONFIG_PATH}/system-genesis-block/genesis.block:/etc/hyperledger/configtx/genesis.block"
      - "${GENERATED_CONFIG_PATH}/ordererOrganizations/${MAIN_DOMAIN}/orderers/orderer.${MAIN_DOMAIN}/msp:/var/hyperledger/orderer/msp"
      - "${GENERATED_CONFIG_PATH}/ordererOrganizations/${MAIN_DOMAIN}/orderers/orderer.${MAIN_DOMAIN}/tls:/var/hyperledger/orderer/tls"
      - "${RUNTIME_ROOT}/orderer:/var/hyperledger/production"
    networks:
      - "${NETWORK}"

  peer0.sjfabric.softjourn.if.ua:
    container_name: "peer0.${MAIN_DOMAIN}"
    image: hyperledger/fabric-peer:${HYPERLEDGER_VERSION}
    environment:
      - "CORE_PEER_ID=peer0.${MAIN_DOMAIN}"
      - CORE_PEER_LOCALMSPID=CoinsMSP
      - "CORE_PEER_ADDRESS=peer0.${MAIN_DOMAIN}:${PORT_PEER0}"
      - "CORE_PEER_LISTENADDRESS=0.0.0.0:${PORT_PEER0}"
      - "CORE_PEER_CHAINCODEADDRESS=peer0.${MAIN_DOMAIN}:${PORT_PEER0_CHAINCODE}"
      - "CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:${PORT_PEER0_CHAINCODE}"
      - "CORE_PEER_GOSSIP_BOOTSTRAP=peer0.${MAIN_DOMAIN}:${PORT_PEER0}"
      - "CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.${MAIN_DOMAIN}:${PORT_PEER0}"
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - "CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_coins"
      - CORE_VM_DOCKER_ATTACHSTDOUT=true
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      # The following setting skips the gossip handshake since we are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - "CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0.${MAIN_DOMAIN}:${PORT_COUCH_DB}"
      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
      # provide the credentials for ledger to connect to CouchDB. The username and password must
      # match the username and password set for the associated CouchDB.
      - "CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=${COUCHDB_USER}"
      - "CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=${COUCHDB_PASSWORD}"
    ports:
      - "${PORT_PEER0}:${PORT_PEER0}"
      - 7053:7053
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    volumes:
      - /var/run/:/host/var/run/
      - "${GENERATED_CONFIG_PATH}/peerOrganizations/${MAIN_DOMAIN}/peers/peer0.${MAIN_DOMAIN}/msp:/etc/hyperledger/fabric/msp"
      - "${GENERATED_CONFIG_PATH}/peerOrganizations/${MAIN_DOMAIN}/peers/peer0.${MAIN_DOMAIN}/tls:/etc/hyperledger/fabric/tls"
      - "${RUNTIME_ROOT}/peer0:/var/hyperledger/production"
    depends_on:
      - "orderer.${MAIN_DOMAIN}"
      - "couchdb0.${MAIN_DOMAIN}"
    networks:
      - "${NETWORK}"

  couchdb0.sjfabric.softjourn.if.ua:
    container_name: "couchdb0.${MAIN_DOMAIN}"
    image: couchdb:3.1
    environment:
      - "COUCHDB_USER=${COUCHDB_USER}"
      - "COUCHDB_PASSWORD=${COUCHDB_PASSWORD}"
    ports:
      - "${PORT_COUCH_DB}:${PORT_COUCH_DB}"
    networks:
      - "${NETWORK}"

  couchdb.initializer:
    image: curlimages/curl:7.86.0
    restart: on-failure
    depends_on:
      - couchdb0.sjfabric.softjourn.if.ua
    command: [ "sh","-c","sleep 15 && echo '[Initializer] Try to create _users database.' && curl -X PUT -u ${COUCHDB_USER}:${COUCHDB_PASSWORD} couchdb0.sjfabric.softjourn.if.ua:${PORT_COUCH_DB}/_users" ]
    networks:
      - "${NETWORK}"

  gateway.sjfabric.softjourn.if.ua:
    container_name: "gateway.${MAIN_DOMAIN}"
    hostname: "gateway.${MAIN_DOMAIN}"
    build: gateway
    image: gateway
    environment:
      - HFC_LOGGING={"info":"console"}
      - GATEWAY_KEY_VALUE_STORE=${GATEWAY_KEY_VALUE_STORE}
      - GATEWAY_ADMIN_USERNAME=${CA_USER}
      - GATEWAY_ADMIN_PASSWORD=${CA_PASSWORD}
      - GATEWAY_MSP_ID=${MSP_ID}
      - GATEWAY_SUPPORTED_CHAINCODES=${CHAINCODE}
      - GATEWAY_DEFAULT_CHAINCODE=${CHAINCODE}
      - GATEWAY_CA_NAME=${GATEWAY_CA_NAME}
      - GATEWAY_CA_URL=${GATEWAY_CA_NAME}
      - GATEWAY_CA_PORT=${PORT_CA}
      - GATEWAY_CRYPTO_PATH=${GATEWAY_CRYPTO_PATH}
      - GATEWAY_CA_CERT_PATH=${GATEWAY_CA_CERT_PATH}
    ports:
      - "${PORT_GATEWAY}:${PORT_GATEWAY}"
    volumes:
      - "${RUNTIME_ROOT}/node_client:/app_data"
      - "${GENERATED_CONFIG_PATH}:/app_data/crypto"
    networks:
      - "${NETWORK}"
